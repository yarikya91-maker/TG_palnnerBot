import asyncio
from flask import Flask
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import os

app = Flask(__name__)

TOKEN = os.environ.get("BOT_TOKEN", "")

@app.route('/')
def home():
    return "‚úÖ Flask —Ä–∞–±–æ—Ç–∞–µ—Ç! Telegram –±–æ—Ç —Ç–æ–∂–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∞–∫—Ç–∏–≤–µ–Ω."

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç üí™")

async def run_bot():
    if not TOKEN:
        print("‚ùå –û—à–∏–±–∫–∞: —Ç–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç! –ü—Ä–æ–≤–µ—Ä—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (BOT_TOKEN).")
        return

    print("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
    app_telegram = ApplicationBuilder().token(TOKEN).build()
    app_telegram.add_handler(CommandHandler("start", start))
    await app_telegram.initialize()
    await app_telegram.start()
    print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω (polling)!")
    await app_telegram.updater.start_polling()
    await app_telegram.updater.wait_until_closed()

async def run_flask():
    port = int(os.environ.get("PORT", 5000))
    print(f"üåê Flask –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    # Flask –±–ª–æ–∫–∏—Ä—É–µ—Ç –ø–æ—Ç–æ–∫, –ø–æ—ç—Ç–æ–º—É –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º executor
    loop = asyncio.get_event_loop()
    await loop.run_in_executor(None, lambda: app.run(host="0.0.0.0", port=port))

async def main():
    # –ó–∞–ø—É—Å–∫–∞–µ–º Flask –∏ Telegram –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    await asyncio.gather(run_flask(), run_bot())

if __name__ == "__main__":
    asyncio.run(main())
